// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Billing.Data.Models.Iam;

public partial class IAMContext : DbContext
{
    public IAMContext(DbContextOptions<IAMContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ServiceHierarchy> ServiceHierarchies { get; set; }

    public virtual DbSet<ServiceHierarchyConfig> ServiceHierarchyConfigs { get; set; }

    public virtual DbSet<Tenant> Tenants { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ServiceHierarchy>(entity =>
        {
            entity.HasKey(e => e.Sno)
                .HasName("PK_ServiceHierarchy_Sno")
                .IsClustered(false);

            entity.HasIndex(e => new { e.TenantId, e.ParentAccId, e.AccountId, e.IsActive }, "Idx_unique_ServiceHierarchy_TenantId_ParentAccId_AccountId_IsActive")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.SavedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Tenant).WithMany(p => p.ServiceHierarchies)
                .HasPrincipalKey(p => p.TenantId)
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceHierarchy_TenantId");
        });

        modelBuilder.Entity<ServiceHierarchyConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigId).IsClustered(false);

            entity.HasIndex(e => new { e.Sno, e.ConfigCode }, "Idx_unique_ServiceHierarchy_Config_Sno_ConfigCode_ConfigValue")
                .IsUnique()
                .IsClustered();

            entity.HasOne(d => d.SnoNavigation).WithMany(p => p.ServiceHierarchyConfigs).HasConstraintName("FK_ServiceHierarchy_Config_Sno");
        });

        modelBuilder.Entity<Tenant>(entity =>
        {
            entity.Property(e => e.SavedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.TenantId).HasComputedColumnSql("(CONVERT([varchar](50),concat(CONVERT([varchar](10),left(lower([RealmName]),(10))),CONVERT([varchar](1),'-'),CONVERT([varchar](3),right(lower(CONVERT([varchar](50),[TUId])),(3))),CONVERT([varchar](2),right('00'+CONVERT([varchar],[SNo]),(2))))))", true);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}